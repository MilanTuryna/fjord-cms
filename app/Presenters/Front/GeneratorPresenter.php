<?php


namespace App\Presenters\Front;


use App\Forms\Front\ContactForm;
use App\Model\Database\EAV\DynamicEntityFactory;
use App\Model\Database\Repository\Gallery\GalleryRepository;
use App\Model\Database\Repository\Settings\GlobalSettingsRepository;
use App\Model\Database\Repository\SMTP\MailRepository;
use App\Model\Database\Repository\SMTP\ServerRepository;
use App\Model\Database\Repository\Template\Entity\Page;
use App\Model\Database\Repository\Template\Entity\PageVariable;
use App\Model\Database\Repository\Template\Entity\Template;
use App\Model\Database\Repository\Template\PageRepository;
use App\Model\Database\Repository\Template\PageVariableRepository;
use App\Model\Database\Repository\Template\TemplateRepository;
use App\Model\FileSystem\Gallery\GalleryFacadeFactory;
use App\Model\FileSystem\Templating\TemplateUploadDataProvider;
use App\Model\FileSystem\Templating\TemplateUploadManager;
use App\Model\Http\Responses\CSSResponse;
use App\Model\Http\Responses\JSResponse;
use App\Model\Http\WebLoader\Specific\DynamicDependencyModule;
use App\Model\Templating\DataHint\FjordTemplateProviderData;
use App\Presenters\FrontBasePresenter;
use App\Utils\FormatUtils;
use JetBrains\PhpStorm\NoReturn;
use Nette\Application\AbortException;
use Nette\Application\BadRequestException;
use Nette\Application\Responses\FileResponse;
use Nette\Application\UI\Multiplier;
use Nette\Routing\Route;
use Nette\Utils\ArrayHash;
use Nette\Utils\Finder;

/**
 * Class GeneratorPresenter
 * @package App\Presenters\Front
 */
class GeneratorPresenter extends FrontBasePresenter
{
    /**
     * GeneratorPresenter constructor.
     * @param TemplateRepository $templateRepository
     * @param PageRepository $pageRepository
     * @param TemplateUploadDataProvider $templateUploadDataProvider
     * @param GalleryRepository $galleryRepository
     * @param ServerRepository $serverRepository
     * @param MailRepository $mailRepository
     * @param GlobalSettingsRepository $globalSettingsRepository
     * @param DynamicEntityFactory $dynamicEntityFactory
     * @param GalleryFacadeFactory $galleryFacadeFactory
     * @param PageVariableRepository $pageVariableRepository
     */
    public function __construct(private TemplateRepository $templateRepository, private PageRepository $pageRepository, private TemplateUploadDataProvider $templateUploadDataProvider,
                                private GalleryRepository $galleryRepository, private ServerRepository $serverRepository, private MailRepository $mailRepository,
                                private GlobalSettingsRepository $globalSettingsRepository, private DynamicEntityFactory $dynamicEntityFactory,
                                private GalleryFacadeFactory $galleryFacadeFactory, private PageVariableRepository $pageVariableRepository)
    {
        parent::__construct($this->templateRepository);
    }

    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws BadRequestException
     */
    public function render404(bool $withCode = true): void {
        $templateUploadManager = new TemplateUploadManager($this->templateUploadDataProvider, $this->usedTemplate->dirname, TemplateUploadManager::MODE_SOLID);
        $error404file = $templateUploadManager->getTemplateFolder($this->usedTemplate->zip_name) . DIRECTORY_SEPARATOR . $this->usedTemplate->error404;
        if(!file_exists($error404file)) {
            $this->error("Tato stránka nebyla nalezena. V případě, že si myslíte, že se jedná o chybu, kontaktujte administrátora", 404);
        }
        $this->template->setFile($error404file);
        if($withCode) $this->getHttpResponse()->setCode(404);
    }

    /**
     * @throws AbortException
     */
    #[NoReturn] public function renderLoaderJavascript(): void {
        $dynamicDependencyModule = new DynamicDependencyModule($this->usedTemplate, $this->templateUploadDataProvider);
        $computedJS = $dynamicDependencyModule->getParsedJS();
        $jsResponse = new JSResponse($computedJS);
        $this->sendResponse($jsResponse);
    }

    /**
     * @throws AbortException
     */
    #[NoReturn] public function renderLoaderCss(): void {
        error_reporting(E_ALL ^ E_DEPRECATED);
        $dynamicDependencyModule = new DynamicDependencyModule($this->usedTemplate, $this->templateUploadDataProvider);
        $computedCSS = $dynamicDependencyModule->getParsedCSS()->getComputedCode(true);
        $cssResponse = new CSSResponse($computedCSS);
        $this->sendResponse($cssResponse);
    }

    /**
     * @throws BadRequestException
     */
    public function renderUrl(): void
    {
        $parameters = $this->getParameters();
        unset($parameters["action"]);
        /**
         * @var $page Page
         */
        $page = $this->pageRepository->findById($parameters["pageId"]);
        $templateUploadManager = new TemplateUploadManager($this->templateUploadDataProvider, $this->usedTemplate->dirname, TemplateUploadManager::MODE_SOLID);
        $templateFolder = $templateUploadManager->getTemplateFolder($this->usedTemplate->zip_name);
        if ($page->output_type === "PATH") {
            $fileName = $templateFolder . $page->output_content;
            if (!file_exists($fileName)) {
                $this->error("Soubor $fileName neexistuje");
            }
        } else {
            $generateFile = $templateFolder . DIRECTORY_SEPARATOR . "___gen-" . $page->id . ".latte";
            if (file_exists($generateFile)) unlink($generateFile);
            $newFile = fopen($generateFile, "w");
            fwrite($newFile, $page->output_content);
            $fileName = $generateFile;
        }

        /**
         * @var $templateVariables PageVariable[]
         */
        $templateVariables = $this->pageVariableRepository->findByColumn(PageVariable::page_id, $page->id);
        $varsAssociativeArray = [];
        foreach ($templateVariables as $templateVariable) {
            $varsAssociativeArray[$templateVariable->id_name] = $templateVariable->content;
        }

        $providerData = new FjordTemplateProviderData();
        $providerData->path404 = $this->usedTemplate->error404;
        $providerData->dynamicEntityFactory = $this->dynamicEntityFactory;
        $providerData->galleryFacadeFactory = $this->galleryFacadeFactory;
        $providerData->settings = $this->globalSettingsRepository->getActualSettings();
        $parametersForTemplate = $parameters;
        unset($parametersForTemplate["pageId"]);
        unset($parametersForTemplate["pageRoute"]);
        $providerData->parameters = $parameters;
        $providerData->templateInfo = $this->usedTemplate;
        $providerData->variables = ArrayHash::from($varsAssociativeArray, true);
        $activeSmtpServer = $this->serverRepository->findAll()->fetch();
        $providerData->activeSmtpServer = $activeSmtpServer ?: null;

        $this->template->setParameters(["fjord" => $providerData]);
        $this->template->setFile($fileName);
    }

    /**
     * @return Multiplier
     */
    public function createComponentContactForm(): Multiplier
    {
        return new Multiplier(function ($serverId) {
            return (new ContactForm($this, $this->serverRepository, $this->mailRepository, $this->globalSettingsRepository, (int)$serverId))->create();
        });
    }
}