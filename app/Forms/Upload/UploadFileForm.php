<?php


namespace App\Forms\Upload;


use App\Forms\FlashMessages;
use App\Forms\Form;
use App\Model\Cryptography;
use App\Model\FileSystem\Admin\AdminUploadManager;
use Exception;
use JetBrains\PhpStorm\NoReturn;
use JetBrains\PhpStorm\Pure;
use Nette\Application\UI\Presenter;
use Nette\Http\FileUpload;

/**
 * Class UploadFileForm
 * @package App\Forms\Upload
 */
class UploadFileForm extends Form
{
    /**
     * UploadFileForm constructor.
     * @param Presenter $presenter
     * @param AdminUploadManager $adminUploadManager
     */
    #[Pure] public function __construct(Presenter $presenter, private AdminUploadManager $adminUploadManager)
    {
        parent::__construct($presenter);

        $this->presenter = $presenter;
    }

    /**
     * @return \Nette\Application\UI\Form
     */
    public function create(): \Nette\Application\UI\Form
    {
        $form = parent::create();
        $form->addMultiUpload("multi_upload",  "Vyberte soubory")->setRequired(true);
        $form->addSubmit("submit", "Nahrát soubor");
        return $form; // TODO: Change the autogenerated stub
    }

    /**
     * @throws Exception
     */
    #[NoReturn] public function success(\Nette\Application\UI\Form $form, array $values): void {
        $multiUpload = $values["multi_upload"];
        /**
         * @var FileUpload[] $multiUpload
         */
        foreach ($multiUpload as $upload) {
            if($upload->isOk() && $upload->hasFile()) {
                $exploded = explode(".", $upload->getSanitizedName());
                $extension = $exploded[array_key_last($exploded)];
                $this->adminUploadManager->add($upload, $upload->getSanitizedName() . Cryptography::createUnique(4) . "." . $extension);
            }
        }
        $this->presenter->flashMessage("Všechny soubory byly úspěšně nahrány.", FlashMessages::SUCCESS);
        $this->presenter->redirect("this");
    }
}